ln -s ~/git/ros_tutorials ~/my_catkin_ws/src/ros_tutorials

catkin_create_pkg  -a 303762 -V 0.0.3 package-303762 rospy nav_msgs std_msgs geometry_msgs

catkin_create_pkg  --help

catkin config --install //dodanie folderu install (podobny do devel)
catkin clean -b
catkin build 


catkin config --extend /home/user/my_catkin_ws/install


echo $ROS_PACKAGE_PATH

roscd <package name>



rostopic pub /text std_msgs/String "data: 'hello world'" 

rosmsg show std_msgs/String

ROS_IP - IP komputera na którym uruchamiamy konsolę (potrzebne przy wielu komputerach)

rosrun rqt_topic rqt_topic - fajne :-)

rosrun rqt_graph rqt_graph 



-----------------------------------------------

#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char** argv){
  ros::init(argc, argv, "simple_navigation_goals");

  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("/move_base", true);

  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "map";
  goal.target_pose.header.stamp = ros::Time::now();

  goal.target_pose.pose.position.x = 1.0;
  goal.target_pose.pose.orientation.w = 1.0;

  ROS_INFO("Sending goal");
  ac.sendGoal(goal);

  ac.waitForResult();

  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    ROS_INFO("Hooray, the base moved 1 meter forward");
  else
    ROS_INFO("The base failed to move forward 1 meter for some reason");

  return 0;
}

------------
Dodawanie headera:

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
)

add_executable(marker_tester src/marker_tester.cpp)
add_library(path_generator_alg src/path_generator_alg.cpp)
target_link_libraries(marker_tester path_generator_alg)

#include <ros/ros.h>
#include "package_303762/path_generator_alg.hpp"
#include <iostream>
#include <stdio.h>

using namespace std;

int main(int argc, char **argv)
{
    ros::init(argc, argv, "test_include_library");
    ros::NodeHandle nh;
    cout<<"Hello"<<endl;
    sayHello();
}
